There’s a theory of database migrations that says that the revisions in existence for a database should 
be able to go from an entirely blank schema to the finished product, and back again. Alembic can roll this way. 
Though we think it’s kind of overkill, considering that SQLAlchemy itself can emit the full CREATE statements 
for any given model using create_all(). If you check out a copy of an application, running this will give you 
the entire database in one shot, without the need to run through all those migration files, which are instead 
tailored towards applying incremental changes to an existing database.

Alembic can integrate with a create_all() script quite easily. After running the create operation, 
tell Alembic to create a new version table, and to stamp it with the most recent revision (i.e. head):
When this approach is used, the application can generate the database using normal SQLAlchemy techniques 
instead of iterating through hundreds of migration scripts. Now, the purpose of the migration scripts is 
relegated just to movement between versions on out-of-date databases, not new databases. You can now remove old 
migration files that are no longer represented on any existing environments.

To prune old migration files, simply delete the files. Then, in the earliest, still-remaining migration file, 
set down_revision to None:
This example features the basic idea of a common need, that of affecting how a migration runs based on command line switches.

The technique to use here is simple; within a migration script, inspect the EnvironmentContext.get_x_argument() collection for 
any additional, user-defined parameters. Then take action based on the presence of those arguments.

To make it such that the logic to inspect these flags is easy to use and modify, we modify our script.py.mako template to make 
this feature available in all new revision files:
It is often the case that an application will need to call upon a series of commands within Commands, where it would be 
advantageous for all operations to proceed along a single transaction. The connectivity for a migration is typically solely 
determined within the env.py script of a migration environment, which is called within the scope of a command.
Replaceable objects present a problem in that in order to make incremental changes to them, we have to refer to the whole 
definition at once. If we need to add a new column to a view, for example, we have to drop it entirely and recreate it fresh with 
the extra column added, referring to the whole structure; but to make it even tougher, if we wish to support downgrade operarations 
in our migration scripts, we need to refer to the previous version of that construct fully, and we’d much rather not have to type out 
the whole definition in multiple places.

This recipe proposes that we may refer to the older version of a replaceable construct by directly naming the migration version in 
which it was created, and having a migration refer to that previous file as migrations run. We will also demonstrate how to integrate 
this logic within the Operation Plugins feature introduced in Alembic 0.8. It may be very helpful to review this section first to get 
an overview of this API.
